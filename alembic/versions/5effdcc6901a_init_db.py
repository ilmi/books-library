"""init db

Revision ID: 5effdcc6901a
Revises:
Create Date: 2025-08-03 20:13:46.575351

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5effdcc6901a"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authors",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column(
            "nationality", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column(
            "biography", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "books",
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False
        ),
        sa.Column("publication_date", sa.Date(), nullable=True),
        sa.Column("pages", sa.Integer(), nullable=False),
        sa.Column(
            "language", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "genre",
            sa.Enum(
                "FICTION",
                "NON_FICTION",
                "MYSTERY",
                "ROMANCE",
                "SCIENCE_FICTION",
                "FANTASY",
                "BIOGRAPHY",
                "HISTORY",
                "SCIENCE",
                "TECHNOLOGY",
                "CHILDREN",
                "YOUNG_ADULT",
                name="genre",
            ),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "AVAILABLE",
                "BORROWED",
                "RESERVED",
                "MAINTENANCE",
                "LOST",
                name="bookstatus",
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("ADMIN", "LIBRARIAN", "MEMBER", name="userrole"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "book_author_links",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["authors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "author_id"),
    )
    op.create_table(
        "borrow_records",
        sa.Column("borrowed_date", sa.DateTime(), nullable=False),
        sa.Column("due_date", sa.Date(), nullable=False),
        sa.Column("returned_date", sa.DateTime(), nullable=True),
        sa.Column("fine_amount", sa.Float(), nullable=True),
        sa.Column("notes", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_borrow_records_book_id"), "borrow_records", ["book_id"], unique=False
    )
    op.create_index(
        op.f("ix_borrow_records_user_id"), "borrow_records", ["user_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_borrow_records_user_id"), table_name="borrow_records")
    op.drop_index(op.f("ix_borrow_records_book_id"), table_name="borrow_records")
    op.drop_table("borrow_records")
    op.drop_table("book_author_links")
    op.drop_table("users")
    op.drop_table("books")
    op.drop_table("authors")
    # ### end Alembic commands ###
